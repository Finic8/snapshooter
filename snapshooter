#!/bin/bash

# snapshooter 
# License: GNU GPLv3

# Documentation at https://github.com/Finic8/snapshooter

configdir="/usr/local/etc/snapshooter"

echo "snapshooter"
date
if [ "$(id -u)" != "0" ]; then
	echo "ERROR: must be run as root"
	exit 12
fi

[ ! -f $configdir/snapshooter.conf ] && { echo "$configdir/snapshooter.conf does not exist"; exit 1; }
source $configdir/snapshooter.conf

printusage () {
echo "usage: snapshooter mode"
echo "snapshooter create [${periods[@]}]"
echo "snapshooter send configname"
echo "snapshooter send configname0,configname1"
echo "Detailed documentation available at https://github.com/Finic8/snapshooter"
exit 2
}
[ $# -eq 0 ] && printusage
mode=$1
if [ $mode == 'create' ]; then
	for (( i=${#periods[@]}-1; i>=0; i-- )); do
		if [[ ${periods[$i]} == "$2" ]]; then
			break
		elif [ $i -eq 0 ]; then
			echo "invalid period specified"
			printusage
		else
			continue
		fi
	done
	configs=$configdir/create/*.conf
elif [ $mode == 'send' ]; then
	if [ -z "$2" ]; then
		configs=$configdir/send/*.conf
	else
		IFS=',' read -ra possconfigs <<< "$2"
		for possconfig in ${possconfigs[@]}; do
			if [ -f $configdir/send/$possconfig.conf ]; then
				configs+=("$configdir/send/$possconfig.conf")
			else
				echo "invalid config specified"
				printusage
			fi
		done
	fi
elif [ $mode == '--help' ]; then
	printusage
else
	echo "invalid option"
	printusage
fi

getnames () {
	if [ "$mode" == "send" ]; then
		allnames=$(getcontents $snapdir | awk -F: '{print $1}' | awk -F_ '{print $((NF-2))}' | sort | uniq)
		if [ "$name" == '*' ]; then
			names=$allnames
		else
			IFS=',' read -ra names <<< "$name"
			for (( i=${#names[@]}-1; i>=0; i-- )); do
				if [ -z "$(printf '%s\n' $allnames | grep "^${names[$i]}$")" ]; then
					echo "ERROR ${names[$i]} does not exist"
					exit 14
				fi
			done
		fi
	else
		if [ "$recursive" == "no" ];then
			if [[ -z "$(btrfs subvolume show $snapdir)" ]]; then
				echo "ERROR: $snapdir is not a btrfs subvolume"
				exit 13
			fi
		elif [ "$recursive" == "yes" ]; then
			content=$(btrfs subvolume list -o $snapdir | awk -F/ '{print $NF}')
			if [ "$name" == '*' ]; then
				for cont in $content; do
					if [[ "$snapdir/$cont" != "$destination" ]]; then
						contents+=( $cont )
					fi
				done
				names=$(printf '%s\n' "${contents[@]}" | sort)
			else
				IFS=',' read -ra names <<< "$name"
				for possname in ${names[@]}; do
					if [ -z "$(printf '%s\n'  $content | grep "^$possname$")" ]; then
						echo "ERROR: $possname does not exist"
						exit 6
					fi
				done
			fi
		else
			echo "ERROR: $config : recursive can only be set to yes or no"
			exit 14
		fi
	fi
}
sshconect () {
	if [ -n "$port" ]; then
		if [ $port -lt 0 ] || [ $port -gt 65535 ]; then
			echo "invalid port specified"
			exit 10
		fi
	 	sshlogin="-p "$port" "$sshlogin
	fi
	if [ -n "$remac" ]; then
		if [ ! -x $wol ];then
			echo "specify correct Wake-on-LAN binary"
			exit 2
		fi
		echo "waking up remote server..."
		if [ -n "$ip" ]; then
			$wol -i $ip $mac
			$wol -i $ip $mac
		else
			$wol $mac
			$wol $mac
		fi
		echo "waiting for server to boot..."
		[ -z $boottime ] && boottime=$defaulboottime
		if ! [[ $boottime =~ ^-?[0-9]+$ ]]; then
			echo "ERROR: boottime not a number"
			exit 15
		fi
		sleep $boottime
	fi
	ssh $sshlogin "uname -a"
	if [ $? -ne 0 ]; then
		echo "server is offline, exiting..."
		exit 3
	fi
	echo "server online, running backup..."
}
cleanup () {
	destcont=$(getcontents $destination | grep $snapname | sort)
	for (( i=${#periods[@]}-1; i>=0; i-- )); do
		tobedeleted=$(printf '%s\n' $destcont | grep ${periods[$i]}| tac | tail -n +$(( ${ntk[$i]} + 1)))
		if [ -z "$sshlogin" ]; then
			for tobedel in $tobedeleted; do
				echo "deleting: $destination/$tobedel"
				btrfs subvolume delete "$destination/$tobedel"
			done
			sync
		else
			for tobedel in $tobedeleted; do
				echo "deleting(ssh): $destination/$tobedel"
				ssh $sshlogin "btrfs subvolume delete "$destination/$tobedel""
			done
			ssh $sshlogin "sync"
		fi
	done
}
getcontents () {
	if [ -n "$sshlogin" ] && [ "$1" == "$destination" ]; then
		cont=$(ssh $sshlogin "btrfs subvolume list -o $destination" | awk -F/ '{print $NF}')
	else
		cont=$(btrfs subvolume list -o $1 | awk -F/ '{print $NF}')
	fi
	if [ -n "$prefix" ]; then
		cont=$(printf '%s\n' $cont | grep "^$prefix")
	else
		cont=$(for content in $cont; do
			if [ $(echo $content | awk -F: '{print $1}' | awk -F_ '{print NF}') -eq 3 ]; then
				echo $content
			fi
		done
		)
	fi
	if [ -n "$postfix" ]; then
		cont=$(printf '%s\n' $cont | grep "$postfix$")
	else
		cont=$(for content in $cont; do
			if [ $(echo $content | awk -F: '{print $NF}' | awk -F_ '{print NF}') -eq 2 ]; then
				echo $content
			fi
		done
		)
	fi
	printf '%s\n' $cont
}
sendsnaps () {
	for snapname in ${names[@]}
	do
	(
		destcont=$(getcontents $destination | grep $snapname | sort)
		#echo "destcont" && printf '%s\n' $destcont
		sourcecont=$(getcontents $snapdir | grep $snapname | sort)
		#echo "sourcecont:" && printf '%s\n' $sourcecont
		commonsnap="$(diff -y <(printf '%s\n' $sourcecont) <(printf '%s\n' $destcont) | egrep -v '<|>|\|' | awk 'END{print $1}')"

		echo && echo "snapshots: $snapname"
		printf '%10s' "local" "remote" "sending" "deleting"
		echo "    period"
		echo
		for (( i=${#periods[@]}-1; i>=0; i-- )); do
			count_local[$i]=$(printf '%s\n' $sourcecont | grep "${periods[$i]}" | wc -l)
			count_remote[$i]=$(printf '%s\n' $destcont | grep "${periods[$i]}" | wc -l)
			if [[ ${ntk[$i]} -eq 0 ]] || [[ ${count_local[$i]} -eq 0 ]]; then 
				count_sending[$i]=0
			else
				diffstrng="$(diff -y <(printf '%s\n' $sourcecont) <(printf '%s\n' $destcont) | grep "${periods[$i]}" | tail -n ${ntk[$i]} | egrep '<|\|' | awk '{print $1}')"
				count_sending[$i]=$(echo "$diffstrng" | wc -w)
				possinit+=("$diffstrng")
			fi
			# print summary table
			count_deleting=$((${count_remote[$i]}+${count_sending[$i]}-${ntk[$i]}))
			[ $count_deleting -lt 0 ] && count_deleting=0
			printf '%10s' "${count_local[$i]}" "${count_remote[$i]}/${ntk[$i]}"
			printf '%10s' "${count_sending[$i]}" "$count_deleting"
			echo "    ${periods[$i]}"
			all[0]=$((${all[0]}+${count_local[$i]}))
			all[1]=$((${all[1]}+${count_remote[$i]}))
			all[2]=$((${all[2]}+${ntk[$i]}))
			all[3]=$((${all[3]}+${count_sending[$i]}))
			all[4]=$((${all[4]}+$count_deleting))
		done
		echo
		printf '%10s' "${all[0]}" "${all[1]}/${all[2]}" "${all[3]}" "${all[4]}"
		echo "    all"
		echo
		if [ ${all[0]} -eq 0 ]; then
			echo "ERROR: no local snapshots"
			exit 17
		fi
		snapshots=$(printf '%s\n' "${possinit[@]}" | sort)
		if [ -z "$commonsnap" ]; then
			parentsnap=$(echo $snapshots | cut -d " " -f1)
			snapshots=$(echo ${snapshots#$parentsnap})
			echo "bootstrapping... $parentsnap"
			if [ -z "$sshlogin" ]; then
				btrfs  send -q $snapdir/$parentsnap | btrfs receive $destination/
			else
				btrfs  send -q $snapdir/$parentsnap | ssh $sshlogin "btrfs receive $destination/"
			fi
			echo "bootstrapping complete"
		else
			parentsnap=$commonsnap
		fi
		#echo "snapshots: $snapshots"
		if [ -n "$snapshots" ]; then 
			echo "parent snapshot present: $parentsnap"
			echo "incrementally sending snapshots..." 
			for snap in $snapshots; do
				echo "sending: $snap"
				if [ -z "$sshlogin" ]; then
					btrfs  send -q -p $snapdir/$parentsnap $snapdir/$snap | btrfs receive $destination/
				else
					btrfs  send -q -p $snapdir/$parentsnap $snapdir/$snap | ssh $sshlogin "btrfs receive $destination/"
				fi
				parentsnap=$snap
			done
		fi
		echo $snapname": everything up to date"
		cleanup
	)
	done
}
createsnaps () {
	echo "creating $1 snapshots..." 
	[ -n "$prefix" ] && prefix=$prefix"_"
	[ -n "$postfix" ] && postfix="_"$postfix
	for snapname in ${names[@]}; do
		if [ "$recursive" == "no" ]; then
			sourcesnap=$snapdir
		else
			sourcesnap=$snapdir/$snapname
		fi
		btrfs subvolume snapshot -r $sourcesnap $destination/$prefix$snapname"_"$(date +%Y-%m-%d_%H:%M:%S)"_"$1$postfix
		cleanup
	done
}

for config in ${configs[@]} 
do
(
	[ ! -f $config ] && { echo "ERROR: config: $config not a file"; exit 1; }
	source $config
	[[ $mode == 'create' ]] && [[ ${!2} -eq 0 ]] && continue
	echo "config: $config"
	[ -z "$name" ] && { echo "ERROR: no name specified"; exit 11; }
	[ -z "$snapdir" ] && { echo "ERROR: snapdir in $config is not set"; exit 3; }
	[ -z "$destination" ] && { echo "ERROR: destination in $config is not set"; exit 4; }
	
	for period in ${periods[@]}
	do
		if [[ ${!period} = *[!0-9]* ]]; then
			echo "$period not a number"
			exit 9
		elif [[ -z ${!period} ]]; then
			ntk+=( 0 )
		else
			ntk+=( "${!period}" )
		fi
		eval "$period=0"
	done
	[ ! -d $snapdir ] && { echo "ERROR: snapdir does not exist"; exit 5; }
	getnames
	#echo "names: ${names[@]}"
	[ -n "$ip" ] && sshlogin+"root@"$ip
	if [ $mode == 'create' ];then
		if [ ! -d $destination ]; then 
			echo "ERROR: destination does not exist"
			exit 7
		fi
		createsnaps $2
	else
		if [ -n "$sshlogin" ]; then 
			if ! [[ "$poweroffserver" =~ yes|no ]]; then
				echo "ERROR: poweroffserver can only be yes/no"
				exit 16
			fi
			sshconect
			if $(ssh $sshlogin "[ ! -d $destination ]"); then
				echo "ERROR: destination does not exist"
				exit 8
			fi
			sendsnaps

			if [ "$poweroffserver" == "yes" ]; then
				echo "shutting down server..."
				ssh $sshlogin "poweroff"
			fi
		else
			if [ ! -d $destination ]; then 
				echo "ERROR: destination does not exist"
				exit 7
			fi
			sendsnaps
		fi
	fi
)
done
exit 0
